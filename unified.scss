@use "sass:string";

/*************************************/
/* !! NOT AVAILABLE IN CODEPEN.io !! */
/* !! NEEDS Dart Sass FROM 1.89.2 !! */
/*************************************/


//
$cps: 0.0001;
$inf: 10000;
$pixel-size: 2px;




/**************/
/* LOGIC/MATH */
/**************/

//
@function abs($a) {
    //@return string.unquote("max(#{$a}, calc(-1 * #{$a}))");
    @return string.unquote("abs(#{$a})");
}

//
@function sign($a) {
    //@return string.unquote("round(to-zero, clamp(-1, calc(#{$a} / max(#{abs($a)}, #{$cps})), 1), 1)");
    @return string.unquote("sign(#{$a})");
}

//
@function mix($i, $a, $b) {
    @return string.unquote("calc(#{$a} * #{$i} + #{$b} * calc(1 - #{$i}))");
}

//
@function land($a, $b) {
    @return string.unquote("calc(#{$a} * #{$b})"); // make our logic simpler
    //@return string.unquote("round(to-zero, clamp(0, calc(calc(#{$a} * #{$b}) * 10000), 1), 1)");
}

//
@function lor($a, $b) {
    @return string.unquote("max(#{$a}, #{$b})"); // make our logic simpler
    //@return string.unquote("round(to-zero, clamp(0, calc(max(#{$a}, #{$b}) * 10000), 1), 1)");
}

// currently un-used...
@function lenToNum($l, $d: 1px) {
    @return string.unquote("tan(atan2(#{$l}, #{$d}))");
}

//
@function inv-mul($a, $b) {
    @return string.unquote("calc(1.0 - calc(1.0 - #{$a}) * #{$b})");
}

//
@function gt($a, $b) {
    $diff: "calc(#{$a} - #{$cps} - #{$b})";
    @return string.unquote("max(#{sign($diff)}, 0)");
}

//
@function ge($a, $b) {
    $diff: "calc(#{$a} + #{$cps} - #{$b})";
    @return string.unquote("max(#{sign($diff)}, 0)");
}

//
@function lt($a, $b) {
    $diff: "calc(#{$b} - #{$cps} - #{$a})";
    @return string.unquote("max(#{sign($diff)}, 0)");
}

//
@function le($a, $b) {
    $diff: "calc(#{$b} + #{$cps} - #{$a})";
    @return string.unquote("max(#{sign($diff)}, 0)");
}

//
@function ne($a, $b) {
    $comp: "calc(#{$a} - #{$b})";
    $diff: "max(calc(#{abs($comp)} - #{$cps}), 0)";
    @return string.unquote("max(#{sign($diff)}, 0)");
}

//
@function eq($a, $b) {
    $diff: "calc(1 - #{ne($a, $b)})";
    @return string.unquote("max(#{sign($diff)}, 0)");
}

//
@function nt($a) {
    @return string.unquote("calc(1 - #{$a})");
}

//
@function col-mix($i, $a, $b) {
    @return color-mix(in srgb, #{$a} calc(#{$i} * 100%), #{$b});
}


/**************/
/* PROPERTIES */
/**************/

//
@mixin declare-vec3-property($name) {
    @property --#{$name}-x {
        inherits: true;
        syntax: "<number>";
        initial-value: 0;
    }

    @property --#{$name}-y {
        inherits: true;
        syntax: "<number>";
        initial-value: 0;
    }

    @property --#{$name}-z {
        inherits: true;
        syntax: "<number>";
        initial-value: 0;
    }
}

//
@property --screen-x {
    inherits: true;
    syntax: "<number>";
    initial-value: 0;
}

@property --screen-y {
    inherits: true;
    syntax: "<number>";
    initial-value: 0;
}

//
@property --dx {
    inherits: true;
    syntax: "<number>";
    initial-value: 0;
}

@property --dy {
    inherits: true;
    syntax: "<number>";
    initial-value: 0;
}

//
@property --x {
    inherits: true;
    syntax: "<integer>";
    initial-value: 0;
}

@property --y {
    inherits: true;
    syntax: "<integer>";
    initial-value: 0;
}

@property --w {
    inherits: true;
    syntax: "<integer>";
    initial-value: 1;
}

@property --h {
    inherits: true;
    syntax: "<integer>";
    initial-value: 1;
}

//
@for $i from 0 through 3 {
    @property --t-#{$i} {
        inherits: true;
        syntax: "<number>";
        initial-value: #{$inf};
    }

    @property --sphere-t-#{$i} {
        inherits: true;
        syntax: "<number>";
        initial-value: #{$inf};
    }

    @property --plane-t-#{$i} {
        inherits: true;
        syntax: "<number>";
        initial-value: #{$inf};
    }

    @property --is-plane-#{$i} {
        inherits: true;
        syntax: "<number>";
        initial-value: 0;
    }

    @property --is-sphere-#{$i} {
        inherits: true;
        syntax: "<number>";
        initial-value: 0;
    }

    @property --color-#{$i} {
        inherits: true;
        syntax: "<color>";
        initial-value: transparent;
    }

    @property --it-color-#{$i} {
        inherits: true;
        syntax: "<color>";
        initial-value: transparent;
    }

    @property --plane-color-#{$i} {
        inherits: true;
        syntax: "<color>";
        initial-value: transparent;
    }

    @property --sphere-color-#{$i} {
        inherits: true;
        syntax: "<color>";
        initial-value: transparent;
    }

    @property --shaded-color-#{$i} {
        inherits: true;
        syntax: "<color>";
        initial-value: transparent;
    }

    @property --surface-color-#{$i} {
        inherits: true;
        syntax: "<color>";
        initial-value: transparent;
    }

    @property --fresnel-#{$i} {
        inherits: true;
        syntax: "<number>";
        initial-value: 0;
    }

    @property --mix-factor-#{$i} {
        inherits: true;
        syntax: "<number>";
        initial-value: 0;
    }

    //
    @include declare-vec3-property("ray-origin-#{$i}");
    @include declare-vec3-property("ray-dir-#{$i}");
    @include declare-vec3-property("sphere-normal-#{$i}");
    @include declare-vec3-property("computed-origin-#{$i}");
    @include declare-vec3-property("mixed-normal-#{$i}");
}


@property --sphere-radius {
    inherits: true;
    syntax: "<number>";
    initial-value: 0;
}

@property --sphere-center-length {
    inherits: true;
    syntax: "<number>";
    initial-value: 0;
}

//
@include declare-vec3-property("camera-origin");
@include declare-vec3-property("camera-dir");
@include declare-vec3-property("camera-up");
@include declare-vec3-property("camera-right");
@include declare-vec3-property("sphere-center");
@include declare-vec3-property("plane-center");
@include declare-vec3-property("plane-normal");




/***************/
/* SPHERE HITS */
/***************/

//
@mixin sphere-intersection-logic($center, $radius, $origin, $dir, $out: "result") {
    @include minus3("oc", $origin, $center);
    --radius-in-2: calc(var(--#{$radius}, 1) * var(--#{$radius}, 1));

    //
    --a: #{dot($dir, $dir)};
    --b: calc(#{dot("oc", $dir)} * 2);
    --c: calc(#{dot("oc", "oc")} - var(--radius-in-2, 1));

    //
    --disc: calc((var(--b, 0) * var(--b, 0)) - (var(--a, 0) * var(--c, 0) * 4));

    //
    --sqrt-of-disc: sqrt(max(var(--disc, 0), 0));
    --a-m-2: calc(2 * var(--a, 0));
    --b-neg: calc(-1 * var(--b, 0));
    --t1: calc((var(--b-neg, 0) - var(--sqrt-of-disc, 0)) / var(--a-m-2, 0));
    --t2: calc((var(--b-neg, 0) + var(--sqrt-of-disc, 0)) / var(--a-m-2, 0));

    //
    --by-min: min(var(--t1, 0), var(--t2, 0));
    --by-max: max(var(--t1, 0), var(--t2, 0));
    #{$out}: #{mix(
        land(ge(var(--disc, 0), 0), ge(var(--by-max, 0), 0)),
        calc(mix(ge(var(--by-min, 0), 0), var(--by-min, 0), var(--by-max, 0)) - 0.001),
        #{$inf}
    )};
}

//
@function sphere-intersection($center, $radius, $origin, $dir) {
    @return --sphere-intersection(
        var(--#{$center}-x, 0),
        var(--#{$center}-y, 0),
        var(--#{$center}-z, 0),
        var(--#{$radius}, 0),
        var(--#{$origin}-x, 0),
        var(--#{$origin}-y, 0),
        var(--#{$origin}-z, 0),
        var(--#{$dir}-x, 0),
        var(--#{$dir}-y, 0),
        var(--#{$dir}-z, 0)
    );
}

//
@mixin sphere-normal($out-normal, $center, $radius, $point) {
    $tmp: $point + "-tmp";
    @include minus3($tmp, $point, $center);
    @include normalize($out-normal, $tmp, $radius);
}



/**************/
/* PLANE HITS */
/**************/

//
@mixin plane-intersection-logic($plane-point, $plane-normal, $origin, $dir, $out: "result") {
    @include minus3("po", $plane-point, $origin);
    --numerator: #{dot($plane-normal, "po")};
    --denominator: #{dot($plane-normal, $dir)};
    --is-parallel: #{eq(var(--denominator, 0), 0)};
    --t: #{mix(var(--is-parallel, 0), #{$inf}, calc(var(--numerator, 0) / var(--denominator, 0)))};
    #{$out}: #{mix(gt(var(--t, #{$inf}), 0), calc(var(--t, #{$inf}) - 0.001), #{$inf})};
}

//
@function plane-intersection($center, $normal, $origin, $dir) {
    @return --plane-intersection(
        var(--#{$center}-x, 0),
        var(--#{$center}-y, 0),
        var(--#{$center}-z, 0),
        var(--#{$normal}-x, 0),
        var(--#{$normal}-y, 0),
        var(--#{$normal}-z, 0),
        var(--#{$origin}-x, 0),
        var(--#{$origin}-y, 0),
        var(--#{$origin}-z, 0),
        var(--#{$dir}-x, 0),
        var(--#{$dir}-y, 0),
        var(--#{$dir}-z, 0)
    );
}



/***************/
/* LIGHT/COLOR */
/***************/

//
@function checkerboard($origin) {
    $moded: "mod(round(var(--#{$origin}-x), 1) + round(var(--#{$origin}-z), 1), 2)";
    $neq: ne(#{$moded}, 0);
    @return color-mix(
        in srgb,
        #eee calc(#{$neq} * 100%),
        #111
    );
}

//
@mixin light-shading-logic($origin, $normal, $light-pos, $color, $out: "result") {
    $light-dir: "light-dir";
    @include vec3(
        $light-dir + "-tmp",
        calc(var(--#{$light-pos}-x) - var(--#{$origin}-x)),
        calc(var(--#{$light-pos}-y) - var(--#{$origin}-y)),
        calc(var(--#{$light-pos}-z) - var(--#{$origin}-z))
    );
    --length: #{length($light-dir + "-tmp")};
    @include normalize($light-dir, $light-dir + "-tmp", var(--length, 1));
    --dot-product: max(0, calc(max(#{dot($normal, $light-dir)} * 0.9 + 0.1, 0)));
    #{$out}: color(
        from #{$color} srgb calc(r * clamp(0, var(--dot-product, 1), 1)) calc(g * clamp(0, var(--dot-product, 1), 1)) calc(
                b * clamp(0, var(--dot-product, 1), 1)
            ) / 1
    );
}

//
@function light-shading($origin, $normal, $light-pos, $color) {
    @return --light-shading(
        var(--#{$origin}-x),
        var(--#{$origin}-y),
        var(--#{$origin}-z),
        var(--#{$normal}-x),
        var(--#{$normal}-y),
        var(--#{$normal}-z),
        var(--#{$light-pos}-x),
        var(--#{$light-pos}-y),
        var(--#{$light-pos}-z),
        #{$color}
    );
}




/***************/
/* VECTOR MATH */
/***************/

//
@mixin vec3($name, $x: 0, $y: 0, $z: 0) {
    --#{$name}-x: #{$x};
    --#{$name}-y: #{$y};
    --#{$name}-z: #{$z};
}

@mixin flat3($name, $s: 0) {
    --#{$name}-x: #{$s};
    --#{$name}-y: #{$s};
    --#{$name}-z: #{$s};
}

@mixin cross($out, $a, $b) {
    @include vec3(
        $out,
        calc(var(--#{$a}-y, 0) * var(--#{$b}-z, 0) - var(--#{$b}-y, 0) * var(--#{$a}-z, 0)),
        calc(var(--#{$a}-z, 0) * var(--#{$b}-x, 0) - var(--#{$b}-z, 0) * var(--#{$a}-x, 0)),
        calc(var(--#{$a}-x, 0) * var(--#{$b}-y, 0) - var(--#{$b}-x, 0) * var(--#{$a}-y, 0))
    );
}

@function dot($a, $b) {
    @return calc(
        (var(--#{$a}-x, 0) * var(--#{$b}-x, 0)) + (var(--#{$a}-y, 0) * var(--#{$b}-y, 0)) +
            (var(--#{$a}-z, 0) * var(--#{$b}-z, 0))
    );
}

@mixin minus3($out, $a, $b) {
    @include vec3(
        $out,
        calc(var(--#{$a}-x, 0) - var(--#{$b}-x, 0)),
        calc(var(--#{$a}-y, 0) - var(--#{$b}-y, 0)),
        calc(var(--#{$a}-z, 0) - var(--#{$b}-z, 0))
    );
}

//
@function length($a) {
    @return sqrt(max(#{dot($a, $a)}, 0));
}

//
@mixin normalize($out, $v, $l) {
    @include vec3(
        $out,
        clamp(-1, calc(var(--#{$v}-x, 0) / #{$l}), 1),
        clamp(-1, calc(var(--#{$v}-y, 0) / #{$l}), 1),
        clamp(-1, calc(var(--#{$v}-z, 0) / #{$l}), 1)
    );
}

@mixin reflect($out, $v, $n) {
    @include vec3(
        $out,
        calc(var(--#{$v}-x, 0) - 2 * dot($v, $n) * var(--#{$n}-x, 0)),
        calc(var(--#{$v}-y, 0) - 2 * dot($v, $n) * var(--#{$n}-y, 0)),
        calc(var(--#{$v}-z, 0) - 2 * dot($v, $n) * var(--#{$n}-z, 0))
    );
}

@mixin copy-vec3($out, $v) {
    @include vec3(
        $out,
        var(--#{$v}-x, 0),
        var(--#{$v}-y, 0),
        var(--#{$v}-z, 0)
    );
}

@mixin compute-intersection-point($out, $origin, $dir, $t) {
    @include vec3(
        $out,
        calc(var(--#{$origin}-x, 0) + var(--#{$dir}-x, 0) * var(--#{$t}, 0)),
        calc(var(--#{$origin}-y, 0) + var(--#{$dir}-y, 0) * var(--#{$t}, 0)),
        calc(var(--#{$origin}-z, 0) + var(--#{$dir}-z, 0) * var(--#{$t}, 0))
    );
}

@mixin mix-vec3($out, $i, $a, $b) {
    @include vec3(
        $out,
        mix(var(--#{$i}, 0), var(--#{$a}-x, 0), var(--#{$b}-x, 0)),
        mix(var(--#{$i}, 0), var(--#{$a}-y, 0), var(--#{$b}-y, 0)),
        mix(var(--#{$i}, 0), var(--#{$a}-z, 0), var(--#{$b}-z, 0))
    );
}






/****************/
/* GENERATE RAY */
/****************/

//
@mixin generate-ray($camera-origin, $camera-view-dir, $camera-up, $camera-right, $out-ray-origin, $out-ray-dir) {
    --dx: calc(var(--x, 0) / var(--w, 0));
    --dy: calc(var(--y, 0) / var(--h, 0));

    //
    --screen-x: calc(var(--dx, 0) * 2 - 1);
    --screen-y: calc(var(--dy, 0) * 2 - 1);

    //
    @include vec3(
        "screen-offset",
        calc(var(--screen-x, 0) * var(--#{$camera-right}-x, 0) + var(--screen-y, 0) * var(--#{$camera-up}-x, 0)),
        calc(var(--screen-x, 0) * var(--#{$camera-right}-y, 0) + var(--screen-y, 0) * var(--#{$camera-up}-y, 0)),
        calc(var(--screen-x, 0) * var(--#{$camera-right}-z, 0) + var(--screen-y, 0) * var(--#{$camera-up}-z, 0))
    );

    //
    @include vec3(
        $out-ray-dir + "-tmp",
        calc(var(--#{$camera-view-dir}-x, 0) + var(--#{$camera-origin}-x, 0) + var(--screen-offset-x, 0)),
        calc(var(--#{$camera-view-dir}-y, 0) + var(--#{$camera-origin}-y, 0) + var(--screen-offset-y, 0)),
        calc(var(--#{$camera-view-dir}-z, 0) + var(--#{$camera-origin}-z, 0) + var(--screen-offset-z, 0))
    );

    //
    @include normalize($out-ray-dir, $out-ray-dir + "-tmp", length($out-ray-dir + "-tmp"));
    @include vec3(
        $out-ray-origin,
        var(--#{$camera-origin}-x, 0),
        var(--#{$camera-origin}-y, 0),
        var(--#{$camera-origin}-z, 0)
    );
}




/****************/
/* NEW CSS FUNC */
/****************/

// low-level
@#{'function'} --sphere-intersection(--center-x type(<number>), --center-y type(<number>), --center-z type(<number>), --radius type(<number>), --origin-x type(<number>), --origin-y type(<number>), --origin-z type(<number>), --dir-x type(<number>), --dir-y type(<number>), --dir-z type(<number>)) returns <number> {
    @include sphere-intersection-logic("center", "radius", "origin", "dir");
}

// low-level
@#{'function'} --plane-intersection(--center-x type(<number>), --center-y type(<number>), --center-z type(<number>), --normal-x type(<number>), --normal-y type(<number>), --normal-z type(<number>), --origin-x type(<number>), --origin-y type(<number>), --origin-z type(<number>), --dir-x type(<number>), --dir-y type(<number>), --dir-z type(<number>)) returns <number> {
    @include plane-intersection-logic("center", "normal", "origin", "dir");
}

// low-level
@#{'function'} --light-shading(--origin-x type(<number>), --origin-y type(<number>), --origin-z type(<number>), --normal-x type(<number>), --normal-y type(<number>), --normal-z type(<number>), --light-pos-x type(<number>), --light-pos-y type(<number>), --light-pos-z type(<number>), --color type(<color>)) returns <color> {
    @include light-shading-logic("origin", "normal", "light-pos", var(--color, #111));
}





/*************/
/* RENDERING */
/*************/

//
.root {
    & {
        @include vec3("camera-origin", 0, 0, 0);
        @include vec3("camera-dir", 0, 0.01, 1);
        @include vec3("camera-up", 0, -1, 0);
        @include vec3("camera-right", 1, 0, 0);
    }

    & {
        --sphere-radius: 1;
        @include vec3("sphere-center", 0, 0.1, 3);
        @include vec3("plane-center", 0, -1, 0);
        @include vec3("plane-normal", 0, 1, 0);
        @include vec3("light-pos", 0, 3, 1);
    }

    & {
        --default-color: #aacffe;
    }
}

//
@mixin trace-ray($i) {
    $prev-i: $i - 1;

    // Potentially optimized?
    // Intersection tests
    & {
        --sphere-t-#{$i}: if(style(--valid-distance-#{$prev-i}: 1):
            #{sphere-intersection(
                "sphere-center",
                "sphere-radius",
                "ray-origin-#{$prev-i}",
                "ray-dir-#{$prev-i}"
            )};
            else: #{$inf});

        --plane-t-#{$i}: if(style(--valid-distance-#{$prev-i}: 1):
            #{plane-intersection(
                "plane-center",
                "plane-normal",
                "ray-origin-#{$prev-i}",
                "ray-dir-#{$prev-i}"
            )};
            else: #{$inf});
    }

    & {
        --t-#{$i}: min(var(--sphere-t-#{$i}, #{$inf}), var(--plane-t-#{$i}, #{$inf}));
        --is-plane-#{$i}: #{eq(var(--t-#{$i}, #{$inf}), var(--plane-t-#{$i}, #{$inf}))};
        --is-sphere-#{$i}: #{eq(var(--t-#{$i}, #{$inf}), var(--sphere-t-#{$i}, #{$inf}))};
        --valid-distance-#{$i}: #{land(
            land(lt(var(--t-#{$i}, #{$inf}), #{$inf}), ge(var(--t-#{$i}, #{$inf}), 0)),
            var(--valid-distance-#{$prev-i}, 1)
        )};
    }

    //
    & {
        @include compute-intersection-point("ray-origin-#{$i}", "ray-origin-#{$prev-i}", "ray-dir-#{$prev-i}", "t-#{$i}");
        @include sphere-normal(
            "sphere-normal-#{$i}",
            "sphere-center",
            var(--sphere-radius, 1),
            "ray-origin-#{$i}"
        );

        //
        @include mix-vec3(
            "mixed-normal-#{$i}",
            "is-sphere-#{$i}",
            "sphere-normal-#{$i}",
            "plane-normal"
        );

        //
        @include reflect("ray-dir-#{$i}", "ray-dir-#{$prev-i}", "mixed-normal-#{$i}");
    }

    //
    & {
        --plane-color-#{$i}: if(style(--is-plane-#{$i}: 1): #{checkerboard("ray-origin-#{$i}")}; else: #111);
    }

    //
    & {
        --default-color-#{$i}: var(--default-color);
        --sphere-color-#{$i}: #ffccaa;

        //
        --surface-color-#{$i}: #{col-mix(var(--is-sphere-#{$i}, 0), var(--sphere-color-#{$i}, #111), var(--plane-color-#{$i}, #fff))};
        --shaded-color-#{$i}: #{light-shading("ray-origin-#{$i}", "mixed-normal-#{$i}", "light-pos", var(--surface-color-#{$i}))};
        --it-color-#{$i}: #{col-mix(var(--valid-distance-#{$i}, 0), var(--shaded-color-#{$i}), var(--default-color-#{$i}))};

        //
        --fresnel-#{$i}: calc(0.05 + 0.95 * clamp(0, pow(1 - abs(#{dot("ray-dir-#{$prev-i}", "mixed-normal-#{$prev-i}")}), 5), 1));
        --mix-factor-#{$i}: calc(var(--valid-distance-#{$prev-i}, 0) * var(--fresnel-#{$i}, 0) * var(--mix-factor-#{$prev-i}, 0));

        //
        @if $i == 1 {
            --color-#{$i}: var(--it-color-#{$i});
        } @else {
            --color-#{$i}: color-mix(
                in srgb,
                var(--color-#{$prev-i}) calc((1 - var(--mix-factor-#{$i}, 1)) * 100%),
                var(--it-color-#{$i}) calc(var(--mix-factor-#{$i}, 1) * 100%)
            );
        }
    }
}

//
.root {
    & > * {
        & {
            @include generate-ray("camera-origin", "camera-dir", "camera-up", "camera-right", "ray-origin-0", "ray-dir-0");
        }

        //
        & {
            --mix-factor-0: 1;
            --fresnel-0: 1;
            --valid-distance-0: 1;
            --color-0: var(--default-color);
        }

        //
        $ray-count: 1;
        @for $i from 1 through $ray-count {
            @include trace-ray($i);
        }

        //
        & { background-color: var(--color-#{$ray-count}, #111); }
    }
}




/**********/
/* LAYOUT */
/**********/

.root {
    & {
        transform-origin: 0px 0px;

        //
        display: grid;
        box-sizing: border-box;
        will-change: transform, contents;
        inline-size: max-content;
        content-visibility: auto;
        contain-intrinsic-size: #{$pixel-size} #{$pixel-size};
        user-select: none; gap: 0px;
        text-rendering: optimizeSpeed;
        shape-rendering: optimizeSpeed;
        image-rendering: optimizeSpeed;
        image-rendering: pixelated;
        background-color: black;
        font-size: 0px;
        line-height: 0;

        // enable accelerated mode
        transform: translateZ(0px);
        //

        // additional optimize
        container-type: size; isolation: isolate;
        inline-size: calc(var(--w, 1) * #{$pixel-size});
        block-size: calc(var(--h, 1) * #{$pixel-size});
        contain: strict;
        overflow: hidden;

        //
        grid-template-columns: repeat(var(--w, 1), 1fr);
        grid-template-rows: repeat(var(--h, 1), 1fr);
    }

    //
    &, & > * { box-sizing: border-box; line-height: 0; padding: 0; margin: 0; border: none 0px transparent; };
    & > * {
        content-visibility: hidden;
        contain-intrinsic-size: #{$pixel-size} #{$pixel-size};
        transform: translateZ(0px); display: block;
        grid-column: calc(var(--x, 1) + 1);
        grid-row: calc(var(--y, 1) + 1);
        will-change: background-color;
        text-rendering: optimizeSpeed;
        shape-rendering: optimizeSpeed;
        image-rendering: optimizeSpeed;
        image-rendering: pixelated;
        font-size: 0px;
        line-height: 0;

        //
        min-inline-size: #{$pixel-size};
        min-block-size: #{$pixel-size};
        max-inline-size: #{$pixel-size};
        max-block-size: #{$pixel-size};

        //
        touch-action: none;
        user-select: none;
        pointer-events: none;
        transform: translateZ(0px);
        overflow: hidden;
        background-repeat: no-repeat;
        background-clip: content-box;

        //
        paint-order: fill;
        color: transparent;
    }
}
